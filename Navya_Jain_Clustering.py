# -*- coding: utf-8 -*-
"""Task 1 Navya Jain

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hQYd8CFFVZCkOjTeu5SPUStiq_kB_ZO6
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import davies_bouldin_score, silhouette_score
import matplotlib.pyplot as plt
import seaborn as sns

customers = pd.read_csv('Customers.csv')
transactions = pd.read_csv('Transactions.csv')

customer_transactions = transactions.groupby('CustomerID').agg(
    total_spent=('TotalValue', 'sum'),
    frequency=('Quantity', 'sum')
).reset_index()

customer_data = pd.merge(customers, customer_transactions, on='CustomerID', how='left')
customer_data['total_spent'] = customer_data['total_spent'].fillna(0)
customer_data['frequency'] = customer_data['frequency'].fillna(0)

features = ['total_spent', 'frequency']
scaler = StandardScaler()
scaled_features = scaler.fit_transform(customer_data[features])

db_scores = []
silhouette_scores = []
cluster_range = range(2, 11)

for n_clusters in cluster_range:
    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    labels = kmeans.fit_predict(scaled_features)
    db_index = davies_bouldin_score(scaled_features, labels)
    silhouette_avg = silhouette_score(scaled_features, labels)
    db_scores.append(db_index)
    silhouette_scores.append(silhouette_avg)

optimal_clusters = cluster_range[np.argmin(db_scores)]
kmeans = KMeans(n_clusters=optimal_clusters, random_state=42)
customer_data['Cluster'] = kmeans.fit_predict(scaled_features)

plt.figure(figsize=(12, 6))
sns.lineplot(x=cluster_range, y=db_scores, marker='o', label='DB Index')
sns.lineplot(x=cluster_range, y=silhouette_scores, marker='o', label='Silhouette Score')
plt.xlabel('Number of Clusters')
plt.ylabel('Score')
plt.title('Clustering Metrics for Different Cluster Sizes')
plt.legend()
plt.show()

cluster_centers = scaler.inverse_transform(kmeans.cluster_centers_)
cluster_summary = pd.DataFrame(cluster_centers, columns=features)
cluster_summary['Cluster'] = range(optimal_clusters)

sns.scatterplot(
    x=customer_data['total_spent'],
    y=customer_data['frequency'],
    hue=customer_data['Cluster'],
    palette='tab10',
    alpha=0.8
)
plt.xlabel('Total Spent')
plt.ylabel('Frequency')
plt.title('Customer Segmentation')
plt.legend(title='Cluster')
plt.show()

print(f"Optimal Clusters: {optimal_clusters}")
print(f"Davies-Bouldin Index for Optimal Clusters: {db_scores[np.argmin(db_scores)]}")

customer_data[['CustomerID', 'Cluster']].to_csv('Customer_Clusters.csv', index=False)